# Playfair Cipher Implementation in Python

def generate_key_matrix(key):
    # Remove duplicates and replace 'J' with 'I'
    key = key.upper().replace("J", "I")
    matrix = []
    used = set()

    for char in key:
        if char.isalpha() and char not in used:
            used.add(char)
            matrix.append(char)

    # Fill remaining letters A-Z (without J)
    for char in "ABCDEFGHIKLMNOPQRSTUVWXYZ":
        if char not in used:
            used.add(char)
            matrix.append(char)

    # Create 5x5 key matrix
    key_matrix = [matrix[i:i + 5] for i in range(0, 25, 5)]
    return key_matrix


def preprocess_text(text):
    # Remove spaces, convert to uppercase, replace J with I
    text = text.upper().replace(" ", "").replace("J", "I")

    # Break into digraphs (pairs)
    i = 0
    pairs = []
    while i < len(text):
        a = text[i]
        b = text[i + 1] if i + 1 < len(text) else 'X'

        if a == b:
            pairs.append(a + 'X')
            i += 1
        else:
            pairs.append(a + b)
            i += 2

    if len(pairs[-1]) == 1:  # If odd length, add X
        pairs[-1] += 'X'
    return pairs


def find_position(char, key_matrix):
    for i, row in enumerate(key_matrix):
        for j, val in enumerate(row):
            if val == char:
                return i, j
    return None


def encrypt_pair(pair, key_matrix):
    a, b = pair[0], pair[1]
    row1, col1 = find_position(a, key_matrix)
    row2, col2 = find_position(b, key_matrix)

    if row1 == row2:
        # Same row: shift right
        return key_matrix[row1][(col1 + 1) % 5] + key_matrix[row2][(col2 + 1) % 5]
    elif col1 == col2:
        # Same column: shift down
        return key_matrix[(row1 + 1) % 5][col1] + key_matrix[(row2 + 1) % 5][col2]
    else:
        # Rectangle: swap columns
        return key_matrix[row1][col2] + key_matrix[row2][col1]


def decrypt_pair(pair, key_matrix):
    a, b = pair[0], pair[1]
    row1, col1 = find_position(a, key_matrix)
    row2, col2 = find_position(b, key_matrix)

    if row1 == row2:
        # Same row: shift left
        return key_matrix[row1][(col1 - 1) % 5] + key_matrix[row2][(col2 - 1) % 5]
    elif col1 == col2:
        # Same column: shift up
        return key_matrix[(row1 - 1) % 5][col1] + key_matrix[(row2 - 1) % 5][col2]
    else:
        # Rectangle: swap columns
        return key_matrix[row1][col2] + key_matrix[row2][col1]


def playfair_encrypt(plaintext, key):
    key_matrix = generate_key_matrix(key)
    pairs = preprocess_text(plaintext)
    cipher_text = ''.join([encrypt_pair(p, key_matrix) for p in pairs])
    return cipher_text


def playfair_decrypt(ciphertext, key):
    key_matrix = generate_key_matrix(key)
    pairs = preprocess_text(ciphertext)
    plain_text = ''.join([decrypt_pair(p, key_matrix) for p in pairs])
    return plain_text


# --- Main Program ---
if __name__ == "__main__":
    key = input("Enter the key: ")
    plaintext = input("Enter the plaintext: ")

    encrypted_text = playfair_encrypt(plaintext, key)
    decrypted_text = playfair_decrypt(encrypted_text, key)

    print("\nPlayfair Cipher Results:")
    print(f"Key Matrix: ")
    matrix = generate_key_matrix(key)
    for row in matrix:
        print(row)

    print(f"\nEncrypted Text: {encrypted_text}")
    print(f"Decrypted Text: {decrypted_text}")
